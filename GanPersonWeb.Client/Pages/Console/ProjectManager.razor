@page "/console/project"
@using GanPersonWeb.Shared.Models

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-10">
    <MudText Typo="Typo.h4" GutterBottom="true">项目管理</MudText>

    <MudPaper Class="pa-6 mb-8" Outlined="true">
        <MudText Typo="Typo.h6" GutterBottom="true">提交新项目</MudText>
        <EditForm Model="@newProject" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator/>
            <MudGrid Spacing="3">
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" @bind-Value="newProject.Title" Label="项目标题" Required="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" @bind-Value="newProject.ImageUrl" Label="项目图片URL" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="newProject.Description" Label="项目描述" Lines="2" />
                </MudItem>
                @* <MudItem xs="12" sm="6"> *@
                @* <MudDatePicker @bind-Date="newProject.PublishDate" Label="发布日期" /> *@
                @* </MudItem> *@
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" @bind-Value="tagsInput" Label="标签（逗号分隔）" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="newProject.Link" Label="项目链接" />
                </MudItem>
                <MudItem xs="12">
                    <MudStack Row>
                        <MudAlert Severity="Severity.Info">@updateMessage</MudAlert>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Type="Submit" OnClick="@(() => HandleValidSubmit())">提交项目</MudButton>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>

    <MudPaper Class="pa-6" Outlined="true">
        <MudText Typo="Typo.h6" GutterBottom="true">已提交项目</MudText>
        <MudTable Items="projects" Hover="true">
            <HeaderContent>
                <MudTh>标题</MudTh>
                <MudTh>描述</MudTh>
                <MudTh>发布日期</MudTh>
                <MudTh>标签</MudTh>
                <MudTh>链接</MudTh>
                <MudTh>操作</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Title</MudTd>
                <MudTd>@context.Description</MudTd>
                <MudTd>@context.PublishDate.ToShortDateString()</MudTd>
                <MudTd>
                    @foreach (var tag in context.Tags)
                    {
                        <MudChip T="string" Class="mr-1" Color="Color.Info" Size="Size.Small">@tag</MudChip>
                    }
                </MudTd>
                <MudTd>
                    @if (!string.IsNullOrWhiteSpace(context.Link))
                    {
                        <MudLink Href="@context.Link" Target="_blank">@context.Link</MudLink>
                    }
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteProject(context))" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private List<Project> projects = new();
    private Project newProject = new();
    private string tagsInput = "";
    private string updateMessage = "输入项目信息，点击提交即可上传新的项目";

    [Inject]
    public ClientProjectService clientProjectService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjectsAsync();
        newProject = new Project { PublishDate = DateTime.Now };
    }

    private async Task LoadProjectsAsync()
    {
        var result = await clientProjectService.GetProjectsAsync();
        projects = result ?? new List<Project>();
    }

    private async Task HandleValidSubmit()
    {
        newProject.Tags = tagsInput.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();
        var isSuccess = await clientProjectService.AddProjectAsync(newProject);
        if (isSuccess)
        {
            updateMessage = "项目已成功提交！";
            await LoadProjectsAsync();
            newProject = new Project { PublishDate = DateTime.Now };
            tagsInput = "";
        }
        else
        {
            updateMessage = "项目提交失败，请检查登陆状态或稍后再试。";
        }
    }

    private async Task DeleteProject(Project project)
    {
        var isSuccess = await clientProjectService.DeleteProjectAsync(project.Id);
        if (isSuccess)
        {
            updateMessage = "项目已删除。";
            await LoadProjectsAsync();            
        }
        else
        {
            updateMessage = "删除项目失败，请稍后再试。";
        }
    }
}
