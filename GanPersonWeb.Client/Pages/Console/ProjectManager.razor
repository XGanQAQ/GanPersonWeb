@page "/console/project"

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-10">
    <MudText Typo="Typo.h4" GutterBottom="true">项目管理</MudText>

    <MudPaper Class="pa-6 mb-8" Outlined="true">
        <MudText Typo="Typo.h6" GutterBottom="true">提交新项目</MudText>
        <EditForm Model="@_newProject" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator/>
            <MudGrid Spacing="3">
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" @bind-Value="_newProject.Title" Label="项目标题" Required="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" @bind-Value="_newProject.ImageUrl" Label="项目图片URL" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="_newProject.Description" Label="项目描述" Lines="2" />
                </MudItem>
                <MudItem xs="12" sm="6">
                <MudDatePicker @bind-Date="_newProject.PublishDate" Label="发布日期" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" @bind-Value="_tagsInput" Label="标签（逗号分隔）" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="_newProject.Link" Label="项目链接" />
                </MudItem>
                <MudItem xs="12">
                    <MudStack Row>
                        <MudAlert Severity="Severity.Info">@_updateMessage</MudAlert>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Type="Submit" OnClick="@(() => HandleValidSubmit())">提交项目</MudButton>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>

    <MudPaper Class="pa-6" Outlined="true">
        <MudText Typo="Typo.h6" GutterBottom="true">已提交项目</MudText>
        <MudTable Items="_projects" Hover="true">
            <HeaderContent>
                <MudTh>标题</MudTh>
                <MudTh>描述</MudTh>
                <MudTh>发布日期</MudTh>
                <MudTh>标签</MudTh>
                <MudTh>链接</MudTh>
                <MudTh>操作</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Title</MudTd>
                <MudTd>@context.Description</MudTd>
                <MudTd>
                    @if (context.PublishDate.HasValue)
                    {
                        @context.PublishDate.Value.ToShortDateString()
                    }
                </MudTd>
                <MudTd>
                    @foreach (var tag in context.Tags)
                    {
                        <MudChip T="string" Class="mr-1" Color="Color.Info" Size="Size.Small">@tag</MudChip>
                    }
                </MudTd>
                <MudTd>
                    @if (!string.IsNullOrWhiteSpace(context.Link))
                    {
                        <MudLink Href="@context.Link" Target="_blank">@context.Link</MudLink>
                    }
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteProject(context))" />
                    <GanPersonWeb.Client.Component.ProjectEditWindows Project="@context" OnUpdate="@(p => UpdateProject(context.Id, p))" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private List<Project> _projects = new();
    private Project _newProject = new();
    private string _tagsInput = "";
    private string _updateMessage = "输入项目信息，点击提交即可上传新的项目";

    [Inject]
    public ClientProjectService ClientProjectService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjectsAsync();
        _newProject = new Project { PublishDate = DateTime.Now };
    }

    private async Task LoadProjectsAsync()
    {
        var result = await ClientProjectService.GetProjectsAsync();
        _projects = result;
    }

    private async Task HandleValidSubmit()
    {
        _newProject.Tags = _tagsInput.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();
        var isSuccess = await ClientProjectService.AddProjectAsync(_newProject);
        if (isSuccess)
        {
            _updateMessage = "项目成功提交！";
            await LoadProjectsAsync();
            _newProject = new Project { PublishDate = DateTime.Now };
            _tagsInput = "";
        }
        else
        {
            _updateMessage = "项目提交失败，请检查登陆状态或稍后再试。";
        }
    }

    private async Task DeleteProject(Project project)
    {
        var isSuccess = await ClientProjectService.DeleteProjectAsync(project.Id);
        if (isSuccess)
        {
            _updateMessage = "项目已删除。";
            await LoadProjectsAsync();            
        }
        else
        {
            _updateMessage = "删除项目失败，请稍后再试。";
        }
    }
    
    private async Task UpdateProject(int id, Project project)
    {
        var isSuccess = await ClientProjectService.UpdateProjectAsync(id, project);
        if (isSuccess)
        {
            _updateMessage = "项目已更新。";
            await LoadProjectsAsync();
        }
        else
        {
            _updateMessage = "更新项目失败，请稍后再试。";
        }
    }
    
}
