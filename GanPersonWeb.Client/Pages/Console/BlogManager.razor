@page "/console/blog"
@using GanPersonWeb.Shared.Models
@using System.ComponentModel.DataAnnotations

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-10">
    <MudText Typo="Typo.h4" GutterBottom="true">博客管理</MudText>

    <MudPaper Class="pa-6 mb-8" Outlined="true">
        <MudText Typo="Typo.h6" GutterBottom="true">提交新博客</MudText>
        <EditForm Model="@newBlog" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid Spacing="3">
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" @bind-Value="newBlog.Title" Label="标题" Required="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" @bind-Value="newBlog.ImageUrl" Label="预览图片URL" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="newBlog.Description" Label="描述" Lines="2" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="newBlog.Content" Label="内容" Lines="5" Required="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" @bind-Value="tagsInput" Label="标签（逗号分隔）" />
                </MudItem>
                <MudItem xs="12">
                    <MudStack Row>
                        <MudAlert Severity="Severity.Info">@updateMessage</MudAlert>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Type="Submit" OnClick="@(() => OnValidSubmit())">提交博客</MudButton>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>

    <MudPaper Class="pa-6" Outlined="true">
        <MudText Typo="Typo.h6" GutterBottom="true">已提交博客</MudText>
        <MudTable Items="blogs" Hover="true">
            <HeaderContent>
                <MudTh>标题</MudTh>
                <MudTh>描述</MudTh>
                <MudTh>发布日期</MudTh>
                <MudTh>标签</MudTh>
                <MudTh>操作</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Title</MudTd>
                <MudTd>@context.Description</MudTd>
                <MudTd>@context.PublishDate.ToShortDateString()</MudTd>
                <MudTd>
                    @foreach (var tag in context.Tags)
                    {
                        <MudChip T="string" Class="mr-1" Color="Color.Info" Size="Size.Small">@tag</MudChip>
                    }
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteBlog(context))" />
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
</MudContainer>

@code {
    private List<Blog> blogs = new();
    private Blog newBlog = new();
    private string tagsInput = "";
    private string updateMessage = "输入博客信息，点击提交即可上传新的博客";

    [Inject]
    public ClientBlogService clientBlogService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadBlogsAsync();
        newBlog = new Blog { PublishDate = DateTime.Now };
    }

    private async Task LoadBlogsAsync()
    {
        var result = await clientBlogService.GetBlogsAsync();
        blogs = result ?? new List<Blog>();
    }

    private async Task OnValidSubmit()
    {
        // Parse tags from input
        newBlog.Tags = tagsInput.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();

        var addedBlog = await clientBlogService.AddBlogAsync(newBlog);
        if (addedBlog != null)
        {
            updateMessage = "博客已成功提交！";
            await LoadBlogsAsync();
            newBlog = new Blog { PublishDate = DateTime.Now };
            tagsInput = "";
        }
        else
        {
            updateMessage = "提交博客失败，请检查登陆状态或稍后再试。";
        }
    }

    private async Task DeleteBlog(Blog blog)
    {
        var success = await clientBlogService.DeleteBlogAsync(blog.Id);
        if (success)
        {
            updateMessage = "博客已删除。";
            await LoadBlogsAsync();
        }
        else
        {
            updateMessage = "删除博客失败，请重试。";
        }
    }
}
