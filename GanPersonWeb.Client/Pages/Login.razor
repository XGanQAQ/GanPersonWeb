@page "/login"

@inject ClientUserService ClientUserService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Small">
    @if (isRegistering)
    {
        <MudPaper Class="mt-10" Elevation="4">
            <MudContainer>
                <MudText Typo="Typo.h5" Class="mb-4">注册</MudText>
                <MudTextField @bind-Value="email" Label="Email" Variant="Variant.Filled" InputType="InputType.Email" />
                <MudTextField @bind-Value="username" Label="Username" Variant="Variant.Filled" />
                <MudTextField @bind-Value="password" Label="Password" Variant="Variant.Filled" InputType="InputType.Password" />
                <MudButton OnClick="HandleRegister" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">注册</MudButton>
                <MudText Color="Color.Error" Class="mt-2">@errorMessage</MudText>
            </MudContainer>
        </MudPaper>
    }
    else
    {
        <MudPaper Class="mt-10" Elevation="4">
            <MudContainer>
                <MudText Typo="Typo.h5" Class="mb-4">登入</MudText>
                <MudTextField @bind-Value="username" Label="Username" Variant="Variant.Filled" />
                <MudTextField @bind-Value="password" Label="Password" Variant="Variant.Filled" InputType="InputType.Password" />
                <MudStack Row>
                    <MudButton OnClick="HandleLogin" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">登陆</MudButton>
                    <MudSpacer></MudSpacer>
                    <MudButton OnClick="ChangeRegistering" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">没有账户？</MudButton>
                </MudStack>
                <MudText Color="Color.Error" Class="mt-2">@errorMessage</MudText>
            </MudContainer>
        </MudPaper>
    }
</MudContainer>


@code {
    private string username { get; set; } = string.Empty;
    private string password { get; set; } = string.Empty;
    private string email { get; set; } = string.Empty;
    private string errorMessage { get; set; } = string.Empty;
    private bool isRegistering { get; set; } = false;

    private void ChangeRegistering()
    {
        isRegistering = !isRegistering;
    }

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        var token = await ClientUserService.LoginAsync(username, password);
        if (token != null)
        {
            // Store the token (e.g., in local storage) and navigate to the home page
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid username or password.";
        }
    }   
    //注册
    private async Task HandleRegister()
    {
        errorMessage = string.Empty;
        bool token = await ClientUserService.RegisterAsync(username, password, email);
        if (token)
        {
            // Store the token (e.g., in local storage) and navigate to the home page
            ChangeRegistering();
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            errorMessage = "Registration failed.";
        }
    }
}
