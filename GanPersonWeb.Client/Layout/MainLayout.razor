@inherits LayoutComponentBase

<link href="css/BlogDetailShowLight.css" rel="stylesheet" />
<link href="css/BlogDetailShowDark.css" rel="stylesheet"/>
<link href="css/MudCardAnimate.css" rel="stylesheet"/>

<MudThemeProvider Theme="@_theme" IsDarkMode="isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudButton Href="/">
            <MudText Typo="Typo.h5" Color="Color.Primary">GanX</MudText>
        </MudButton>
        <MudSpacer />

        <MudToggleIconButton @bind-Toggled="isDarkMode"
        Icon="@Icons.Material.Filled.LightMode"
        Color="@Color.Error"
        ToggledIcon="@Icons.Material.Filled.ModeNight"
        ToggledColor="@Color.Inherit"
        title="@(isDarkMode ? "On" : "Off")" />

        <MudMenu Dense
        Variant="Variant.Text"
        Size="Size.Medium"
        Color="Color.Inherit"
        Icon="@Icons.Material.TwoTone.MoreVert">
            <MudNavGroup Title="账户" Icon="@Icons.Material.Filled.ManageAccounts" IconColor="Color.Primary">
                <MudNavLink Href="/" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person" IconColor="Color.Primary">@userName</MudNavLink>
                <MudNavLink OnClick="Login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.TwoTone.Login" IconColor="Color.Primary">登入</MudNavLink>
                <MudNavLink OnClick="Logout" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.TwoTone.Logout" IconColor="Color.Primary">登出</MudNavLink>
            </MudNavGroup>

            <MudDivider />

            <MudNavGroup Title="主题" Icon="@Icons.Material.Filled.Palette" IconColor="Color.Primary">
                @foreach(var theme in themes)
                {
                    <MudNavLink Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Palette" IconColor="Color.Primary" OnClick="@(() => ChangeTheme(theme.Name))">@theme.Name</MudNavLink>
                }
            </MudNavGroup>

            <MudDivider />

            <MudNavLink Href="/Console/Dashboard" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Primary">设置</MudNavLink>

        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        @* <MudDrawerHeader>

        </MudDrawerHeader> *@
        <MudNavMenu>
            @if (relativePath.StartsWith("Console"))
            {
                <MudNavLink Href="/Console/Dashboard" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Terminal">Dashboard</MudNavLink>
                <MudNavLink Href="/Console/PersonInfo" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">PersonInfo</MudNavLink>
                <MudNavLink Href="/Console/Blog" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.NoteAdd">Blog</MudNavLink>
                <MudNavLink Href="/Console/Project" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.AddToQueue">Project</MudNavLink>
                <MudNavLink Href="/Console/Picture" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.AddPhotoAlternate">Picture</MudNavLink>
            }
            else
            {
                <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                <MudNavGroup Title="Blogs" Icon="@Icons.Material.Filled.Article" Expanded>
                    <MudNavLink Href="/Blogs" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.ReadMore">Browse</MudNavLink>
                    <MudNavLink Href="/Blogs/Archive" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Archive">Archive</MudNavLink>
                </MudNavGroup>
                <MudNavLink Href="/Portfolio" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Work">Portfolio</MudNavLink>
                <MudNavLink Href="/PictureBed" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Collections">Picture</MudNavLink>
                <MudNavLink Href="/GameDevLab" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.VideogameAsset">GameDevLab</MudNavLink>

                @* <MudNavLink Href="About" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.BackHand">About</MudNavLink> *@
                <MudNavLink Href="/Me" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.TagFaces">Me</MudNavLink>
            }
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {

    private bool _drawerOpen = true;
    private bool isDarkMode
    {
        get
        {
            return themePaletteService.IsDark;
        }
        set
        {
            themePaletteService.SetIsDark(value);
        }
    }
    private MudTheme? _theme = null;

    private string relativePath = string.Empty;// 相对路径

    private List<Theme> themes = new List<Theme>();

    [Inject]
    public ClientUserService clientUserService { get; set; } = default!;
    private string userName = "未登录";
    [Inject]
    public NavigationManager navigation { get; set; } = default!;
    [Inject]
    public ThemePaletteService themePaletteService { get; set; } = default!;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        //初始化主题

        themes = themePaletteService.GetThemes();
        _theme = themePaletteService.ChangeTheme("default").MudTheme;

        // 注册导航事件
        // 当前的Uri发生变化时，更新相对路径
        navigation.LocationChanged += OnLocationChanged;
        UpdateRelativePath();
    }

    public void Dispose()
    {
        navigation.LocationChanged -= OnLocationChanged;
    }

    #region 导航切换
    /// 更新相对路径
    private void UpdateRelativePath()
    {
        relativePath = navigation.ToBaseRelativePath(navigation.Uri);
    }

    /// 处理导航事件，更新相对路径
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateRelativePath();
        StateHasChanged();
    }
    #endregion

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        isDarkMode = !isDarkMode;
    }

    private void ChangeTheme(string name)
    {
        _theme = themePaletteService.ChangeTheme(name).MudTheme;
        StateHasChanged();
    }

    private async Task Login()
    {
        // 获取当前用户信息
        if (await clientUserService.IsAuthenticated())
        {
            var userInfo = await clientUserService.GetMyselfUserInformation();
            userName = userInfo.Username;
            StateHasChanged();
        }
        else
        {
            userName = "未登录";
            navigation.NavigateTo("/login", true);
        }
    }

    //点击登出按钮
    private async Task Logout()
    {
        await clientUserService.LogoutAsync();
        StateHasChanged();
    }

}


