<MudPaper>
    <MudContainer>
        <MudStack Row AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6" Color="Color.Secondary">评论区</MudText>
            <MudSpacer/>
            <MudIconButton Icon="@Icons.Material.Filled.MoreHoriz" OnClick="() => OepnMoreDetail()"></MudIconButton>
        </MudStack>

        <MudList T="string">
            @if (comments.Count == 0)
            {
                <MudPaper Outlined="true" Class="mt-2">
                    <MudListItem>
                        <MudText Typo="Typo.body1" Color="Color.Default">暂无评论，快来抢沙发吧！</MudText>
                    </MudListItem>
                </MudPaper>
            }
            else
            {
                @foreach (var comment in comments)
                {
                    <MudPaper Outlined="true" Class="mt-2">
                        @if (isAdmin)
                        {
                            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.DeleteForever" OnClick="() => DeleteComment(comment)"></MudIconButton>
                        }
                        <MudListItem>
                            <MudText Typo="Typo.subtitle1" Color="Color.Tertiary">@comment.Author</MudText>
                            <MudText Typo="Typo.body1">@comment.Content</MudText>
                            <MudText Typo="Typo.caption">@comment.PublishDate.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</MudText>
                        </MudListItem>
                    </MudPaper>
                }
            }
        </MudList>

        <MudDivider DividerType="DividerType.Middle" Class="mt-4 mb-4"/>

        <MudText Typo="Typo.h6" Color="Color.Secondary">发表评论</MudText>
        <MudTextField @bind-Value="newCommentContent" Label="评论内容" Variant="Variant.Outlined" Lines="3"/>
        <MudAlert Severity="Severity.Info" Class="mt-2 mb-2">@submitFallbackMessage</MudAlert>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitComment">发表评论</MudButton>
    </MudContainer>
</MudPaper>

@code {
    [Parameter] public int BlogId { get; set; }

    [Inject]
    public ClientBlogCommentService ClientCommentService { get; set; } = default!;
    [Inject]
    public ClientUserService ClientUserService { get; set; } = default!;
    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    private List<Comment> comments { get; set; } = new();

    private string newCommentContent { get; set; } = string.Empty;
    private string submitFallbackMessage = "登入并输入评论内容即可评论！";

    private bool isAdmin { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCommentsAsync();
    }

    private async Task LoadCommentsAsync()
    {
        if (BlogId > 0)
        {
            comments = await ClientCommentService.GetCommentsByBlogIdAsync(BlogId);
        }
    }

    private async Task OepnMoreDetail()
    {
        if (!await ClientUserService.IsAuthenticated())
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        if (await ClientUserService.IsAdmin())
        {
            isAdmin = true;
            StateHasChanged();
        }
    }

    private async Task SubmitComment()
    {
        if (string.IsNullOrWhiteSpace(newCommentContent))
        {
            submitFallbackMessage = "评论内容不能为空！";
            StateHasChanged();

            return;
        }

        if (! await ClientUserService.IsAuthenticated())
        {
            submitFallbackMessage = "请先登录！";
            StateHasChanged();

            return;
        }

        var user = await ClientUserService.GetMyselfUserInformation();
        var comment = new Comment
        {
            BlogId = BlogId,
            Author = user.Username,
            Content = newCommentContent,
            PublishDate = DateTime.Now
        };

        var success = await ClientCommentService.AddCommentAsync(comment);
        if (success)
        {
            newCommentContent = string.Empty;
            // Optionally clear author: NewCommentAuthor = string.Empty;
            submitFallbackMessage = "评论成功！";
            await LoadCommentsAsync();
        }
        else
        {
            submitFallbackMessage = "评论失败，请稍后再试！";
        }
        StateHasChanged();
    }

    //删除评论
    private async Task DeleteComment(Comment comment)
    {
        var success = await ClientCommentService.DeleteCommentAsync(comment.Id);
        if (success)
        {
            comments.Remove(comment);
            StateHasChanged();
        }
        else
        {
            submitFallbackMessage = "删除评论失败，请稍后再试！";
        } 
    }
}
