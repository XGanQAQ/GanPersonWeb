
<MudGrid Spacing="3">
    @if (_isLoading)
    {
        <MudItem xs="12">
            <MudText Typo="Typo.h6" Class="text-gray-400" Align="Align.Center">加载中...</MudText>
        </MudItem>
    }
    else if (_projects.Count > 0)
    {
        @foreach (var project in _projects)
        {
            <MudItem xs="12" sm="12" md="@(12 / InlineCount)" Class="d-flex flex-grow-1">
                <MudCard Class="animated-card" Style="width:100%;">
                    <MudCardMedia Image="@project.ImageUrl" Height="200" />
                    <MudCardContent>
                        <MudStack Row>
                            <MudText Typo="Typo.h5" Class="mb-4" Color="Color.Primary">@project.Title</MudText>
                            <MudSpacer />
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Filled.Update"></MudIcon>
                                @project.PublishDate.Value.ToString("yyyy-MM-dd")
                            </MudText>
                        </MudStack>

                        <MudText Typo="Typo.body2" Class="" Color="Color.Default">
                            @project.Description
                        </MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudChipSet T="string" Size="Size.Small">
                            @foreach (var tag in project.Tags)
                            {
                                <MudChip>@tag</MudChip>
                            }
                        </MudChipSet>
                        <MudSpacer/>
                        <MudButton Variant="Variant.Text" Color="Color.Info" Href="@project.Link">
                            了解更多
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
        @* 展示空白框 *@
        @for (int i = 0; i < Math.Max(0, DisplayCount - _projects.Count); i++)
        {
            <MudItem xs="12" sm="12" md="@(12 / InlineCount)" Class="d-flex flex-grow-1">
                <MudPaper Elevation="2" Class="pa-4" Style="height:100%;width:100%;"></MudPaper>
            </MudItem>
        }
        @if (IsShowPagination)
        {
            <MudItem xs="12">
                <div class="d-flex flex-column align-center gap-4">
                    <MudPagination SelectedChanged="OnPageChanged"
                                   ShowPageButtons="@IsShowPageButtons"
                                   ShowFirstButton="true"
                                   ShowLastButton="true"
                                   Count="@PageCount"
                                   />
                </div>
            </MudItem>
        }
    }
    else
    {
        <MudItem xs="12">
            <MudText Typo="Typo.h6" Class="text-gray-400" Align="Align.Center">暂无项目</MudText>
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter] public int DisplayCount { get; set; } = 3;
    [Parameter] public int InlineCount { get; set; } = 2; // 每行显示的项目数量
    [Parameter] public string FilterTag { get; set; } = string.Empty; // 过滤标签 TODO: 需要实现过滤功能

    [Parameter] public bool IsShowPagination { get; set; } = true;
    [Parameter] public bool IsShowPageButtons { get; set; } = false;

    [Inject]
    public ClientProjectService ClientProjectService { get; set; } = default!;

    private List<Project> _projects = new List<Project>();
    private int _totalProjects = 0;
    private bool _isLoading = false;

    private int PageCount => (int)Math.Ceiling((double)_totalProjects / DisplayCount);
    
    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        // 获取项目总数
        _totalProjects = await ClientProjectService.GetProjectsCountAsync();
        await GetRangeProjectsAsync(0, DisplayCount);
        _isLoading = false;
    }
    
    // 分页获取项目
    protected async Task GetRangeProjectsAsync(int start, int count)
    {
        _projects = await ClientProjectService.GetProjectsInRangeAsync(start, count);
    }

    protected List<Project> FilterProjectWithTag(List<Project> projects, Func<Project, bool> predicate)
    {
        return projects.Where(predicate).ToList();
    }

    private async Task OnPageChanged(int page)
    {
        int start = (page - 1) * DisplayCount;
        await GetRangeProjectsAsync(start, DisplayCount);
    }
}
